
Teste aula.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000124  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000153  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000161  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000852  00000000  00000000  00000181  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c4  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000a2  000000a2  00000116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    0000000c  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  000000aa  000000aa  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  000000ac  000000ac  00000120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  000000ae  000000ae  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    00000016  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000004  000000a6  000000a6  0000011a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 40 00 	jmp	0x80	; 0x80 <_etext>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000096 <main>:
#include <xc.h>
#define F_CPU 16000000
#include <util/delay.h>
int main(void)
{
	DDRB = (1<<5); //configura PB5 como saída
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<5); //desliga PB5
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0xa>

Disassembly of section .text.__dummy_fini:

000000aa <_fini>:
  aa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ac <__funcs_on_exit>:
  ac:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000ae <__simulator_exit>:
  ae:	08 95       	ret

Disassembly of section .text.exit:

00000080 <exit>:
  80:	ec 01       	movw	r28, r24
  82:	0e 94 56 00 	call	0xac	; 0xac <__funcs_on_exit>
  86:	0e 94 55 00 	call	0xaa	; 0xaa <_fini>
  8a:	ce 01       	movw	r24, r28
  8c:	0e 94 57 00 	call	0xae	; 0xae <__simulator_exit>
  90:	ce 01       	movw	r24, r28
  92:	0e 94 53 00 	call	0xa6	; 0xa6 <_Exit>

Disassembly of section .text._Exit:

000000a6 <_Exit>:
  a6:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
