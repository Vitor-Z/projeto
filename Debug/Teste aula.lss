
Teste aula.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000183  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000934  00000000  00000000  000001b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  00000ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000003c  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000da  000000da  0000014e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000d6  000000d6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
#include <xc.h>
#define F_CPU 16000000
#include <util/delay.h>
int main(void)
{
	DDRB = (1<<5); //configura PB5 como saída
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<5); //desliga PB5
  84:	85 b1       	in	r24, 0x05	; 5
  86:	8f 7d       	andi	r24, 0xDF	; 223
  88:	85 b9       	out	0x05, r24	; 5
	while(1)
	{
		PORTB |= 0b00100000; // aciona PB5
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	89 e6       	ldi	r24, 0x69	; 105
  94:	98 e1       	ldi	r25, 0x18	; 24
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
		_delay_ms(500);
		PORTB &= 0b11011111; // desaciona PB5
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	89 e6       	ldi	r24, 0x69	; 105
  ac:	98 e1       	ldi	r25, 0x18	; 24
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
  ba:	e7 cf       	rjmp	.-50     	; 0x8a <main+0xa>

Disassembly of section .text.__dummy_fini:

000000da <_fini>:
  da:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000dc <__funcs_on_exit>:
  dc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000de <__simulator_exit>:
  de:	08 95       	ret

Disassembly of section .text.exit:

000000bc <exit>:
  bc:	ec 01       	movw	r28, r24
  be:	0e 94 6e 00 	call	0xdc	; 0xdc <__funcs_on_exit>
  c2:	0e 94 6d 00 	call	0xda	; 0xda <_fini>
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 6f 00 	call	0xde	; 0xde <__simulator_exit>
  cc:	ce 01       	movw	r24, r28
  ce:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Exit>

Disassembly of section .text._Exit:

000000d6 <_Exit>:
  d6:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
